apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "maven"
apply plugin: "signing"

group = "org.opensextant"
version = "2.0.1"

// Publishing locations
def oss_snapshot = "https://oss.sonatype.org/content/repositories/snapshots"
def oss_staging = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

repositories {
	[ mavenCentral(), maven { url oss_snapshot } ]
}

configurations {
	compile { description = 'These modules are needed at compile time and runtime' }
	runtime { extendsFrom compile
			  description = 'These modules are only needed at runtime' }
	test    { extendsFrom runtime
			  description = 'Include these in addition when testing' }
	jni		{ extendsFrom compile
			  description = 'Output of compilation used for creating jni headers' }
}

eclipse {
	project {
		name = 'giscore'
		natures 'org.springsource.ide.eclipse.gradle.core.nature',
			'org.eclipse.jdt.groovy.core.groovyNature'
	}
	classpath {
		plusConfigurations += configurations.test
	}
}

ext.IOUtils = Class.forName("org.apache.commons.io.IOUtils")
def packageLibrary(name, libname, packagen, osn, extn, pre = "") {
	def libdir = new java.io.File(sourceSets.main.output.classesDir, packagen)
	libdir = new java.io.File(libdir, osn)
	task "$name" << {
		// Make output directory
		if (! libdir.exists()) libdir.mkdirs()
		// Create and write property file
		def propfile = new java.io.File(libdir, "filegdb.properties")
		def taskname = "$name"
		def lib = "$libname"
		def packageName = "$packagen"
		def os = "$osn"
		def extension = "$extn"
		def prefix = "$pre"
		def props = new java.util.Properties()
		def writer = new java.io.FileWriter(propfile)
		def libfile = prefix + "filegdb." + extension
		def formatter = new java.text.SimpleDateFormat("yyyy/MM/dd")
		props.setProperty("modified", formatter.format(new java.util.Date()))
		props.setProperty("filename", libfile)
		props.store(writer, "Automatically generated file, do not edit")
		IOUtils.closeQuietly(writer)
		// Copy library into place
		def fromis = new java.io.FileInputStream(new File(projectDir, lib))
		def toos = new java.io.FileOutputStream(new java.io.File(libdir, libfile))		
		IOUtils.copy(fromis, toos)
		IOUtils.closeQuietly(fromis)
		IOUtils.closeQuietly(toos)
	}
}

packageLibrary("packageWin64", "filegdb/win64/filegdb/x64/Release/filegdb.dll",
	"org/opensextant/giscore/filegdb", "win64", "dll")

packageLibrary("packageLinux", "filegdb/linux/filegdb/dist/Release/GNU-Linux-x86/libfilegdb.so",
	"org/opensextant/giscore/filegdb", "linux64", "so", "lib")

jar.dependsOn compileJava, packageWin64, packageLinux

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}
 
task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

/* This task is not yet working */  
task createJni(dependsOn: jar) << {
	ant.javah(destdir: "build/jni", classpath: configurations.jni.asPath) {
		ant.class(name: 'org.opensextant.giscore.filegdb.Geodatabase')
		ant.class(name: 'org.opensextant.giscore.filegdb.Table')
		ant.class(name: 'org.opensextant.giscore.filegdb.Row')
		ant.class(name: 'org.opensextant.giscore.filegdb.EnumRows')
	}
}

/*
	This needs to be converted to Gradle
 
 	<target name="api-compatibility" depends="jar" description="Compare the latest build to the previous version to detect API changes.">
		<ivy:cachepath pathid="clirr.path" organisation="net.sf.clirr" module="clirr-core" revision="0.6-mitre" conf="default" inline="true"/>
		<taskdef resource="clirrtask.properties" classpathref="clirr.path" />

		<fail unless="previous.revision" message="The previous.revision property was not set, could not load the last release for API comparison."/>
		<ivy:retrieve inline="true" conf="default" organisation="org.opensextant" module="giscore" revision="${previous.revision}" sync="true" pattern="${build.previous}/[organization].[artifact]-[revision].[ext]" />
		<property name="previous.jar" value="org.opensextant.giscore-${previous.revision}.jar"/>
		<fail message="Could not find previous revision at ${build.previous}/${previous.jar}">
			<condition>
				<not>
					<available file="${build.previous}/${previous.jar}"/>
				</not>
			</condition>
		</fail>

		<delete file="${build}/clirr.xml"/>
		<clirr failOnBinError="false" failOnSrcError="false">
			<origclasspath>
				<fileset dir="${build.previous}">
					<exclude name="${previous.jar}"/>
				</fileset>
			</origclasspath>
			<newclasspath refid="project.classpath"/>
			<origFiles dir="${build.previous}" includes="${previous.jar}"/>
			<newFiles dir="${rel}/jars/" includes="giscore.jar"/>
			<formatter type="xml" outfile="${build}/clirr.xml"/>
		</clirr>
	</target>

 */

jar {
	baseName = "giscore"
}

artifacts {
	archives jar
	archives javadocJar
	archives sourcesJar
}

signing {
	sign configurations.archives
}

dependencies {
	def slf4j_version = '1.7.2'

	compile group: 'org.opensextant', name: 'geodesy', version: '2.0.+'
	compile group: 'commons-lang', name: 'commons-lang', version: '2.5'
	compile group: 'commons-io', name: 'commons-io', version: '1.4'
	// compile group: 'stax', name: 'stax-api-osgi', version: '1.0.1'	
	compile group: 'org.slf4j', name: 'slf4j-api', version: slf4j_version
	compile group: 'org.slf4j', name: 'slf4j-simple', version: slf4j_version 
	compile group: 'log4j', name: "log4j", version: '1.2.+'
	testCompile group: 'findbugs', name: 'annotations', version: "1.0.0"
	testCompile('junit:junit:4.10')
	jni files(dir: "build/libs", include: 'giscore-' + version + '.jar')
}

uploadArchives.doFirst() {
	if (hasProperty('sonatypeUsername')) {
		ext.pubUser = sonatypeUsername
	} else {
		throw new Exception('sonatypeUsername and sonatypePassword must be defined when uploading ')
	}
	if (hasProperty('sonatypePassword')) {
		ext.pubPass = sonatypePassword
	} else {
		throw new Exception('sonatypeUsername and sonatypePassword must be defined when uploading ')
	}
}

uploadArchives {
	// See above in the doFirst, these must be defined to actually publish
	ext.pubUser = ''
	ext.pubPass = ''
		
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
 
			repository(url: oss_staging) {
				authentication(userName: pubUser, password: pubPass)
			}
			
			snapshotRepository(url: oss_snapshot) {
				authentication(userName: pubUser, password: pubPass)
			}
			
			pom.project {
			   name 'giscore'
			   packaging 'jar'
			   description 'GIScore is a streaming IO library for geographic information system data formats'
			   url 'https://github.com/OpenSextant/giscore'
 
			   scm {
				   url 'scm:git://github.com/OpenSextant/giscore.git'
				   connection 'scm:git@github.com:OpenSextant/giscore.git'
				   developerConnection 'scm:git@github.com:OpenSextant/giscore.git'
			   }
 
			   licenses {
				   license {
					   name 'The Apache Software License, Version 2.0'
					   url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					   distribution 'repo'
				   }
			   }
 
			   developers {
				   developer {
					   id 'drand'
					   name 'Doug Rand'
				   }
				   developer {
				   		id 'docjason'
						name 'Jason Mathews'
				   }
			   }
		   }
		}
	}
}